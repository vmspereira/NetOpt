/*******************************************************************************
 * Copyright 2012-2017,
 *  Centro Algoritmi - University of Minho
 * 
 *  This is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This code is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Public License for more details.
 * 
 *  You should have received a copy of the GNU Public License
 *  along with this code.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  @author Vítor Pereira
 ******************************************************************************/
package pt.uminho.algoritmi.netopt.ospf.simulation.net;

import java.io.Serializable;
import java.util.StringTokenizer;

import pt.uminho.algoritmi.netopt.ospf.graph.Graph.Status;

// Class to handle data from an edge (link) in a network generated by the Brite
// network topology generator 
@SuppressWarnings("serial")
public class NetEdge implements Serializable
{
	
 static double EDGE_DEFAULT_BANDWIDTH=1000.0;
 static double EDGE_DEFAULT_DELAY=1.0;
 static double EDGE_DEFAULT_LENGTH=1.0;
	
	
 protected int edgeId;
 protected int from, to;
 protected double length, delay, bandwidth; 
 protected int ASfrom, ASto;
 private Status status;

 protected NetProperties properties;
 
 public NetEdge (String line)
 {
  StringTokenizer st = new StringTokenizer(line,"\t");
  this.edgeId = Integer.valueOf (st.nextToken()).intValue();
  this.from = Integer.valueOf (st.nextToken()).intValue();
  this.to = Integer.valueOf (st.nextToken()).intValue();
  this.length = Double.valueOf(st.nextToken()).doubleValue(); 
  this.delay = Double.valueOf(st.nextToken()).doubleValue(); 
  this.bandwidth = Double.valueOf(st.nextToken()).doubleValue(); 
  this.ASfrom = Integer.valueOf (st.nextToken()).intValue();
  this.ASto = Integer.valueOf (st.nextToken()).intValue();
  this.status=Status.UP;
  this.properties=new NetProperties();
 }
 
  
 
 public NetEdge(int from,int to){
	 this.edgeId = -1;
	 this.from = from;
	 this.to = to;
	 this.bandwidth=NetEdge.EDGE_DEFAULT_BANDWIDTH;
	 this.delay=NetEdge.EDGE_DEFAULT_DELAY;
	 this.length=NetEdge.EDGE_DEFAULT_LENGTH;
	 this.ASfrom=-1;
	 this.ASto=-1;
	 this.status=Status.UP;
	 this.properties=new NetProperties();
 }
 
 

 public NetEdge() {
	 this.edgeId = -1;
	 this.from = -1;
	 this.to = -1;
	 this.bandwidth=NetEdge.EDGE_DEFAULT_BANDWIDTH;
	 this.delay=NetEdge.EDGE_DEFAULT_DELAY;
	 this.length=NetEdge.EDGE_DEFAULT_LENGTH;
	 this.ASfrom=-1;
	 this.ASto=-1;
	 this.status=Status.UP;
	 this.properties=new NetProperties();
}



public int getEdgeId() {
	return edgeId;
}



public void setEdgeId(int edgeId) {
	this.edgeId = edgeId;
}



public int getFrom() {
	return from;
}



public void setFrom(int from) {
	this.from = from;
}



public int getTo() {
	return to;
}



public void setTo(int to) {
	this.to = to;
}



public double getLength() {
	return length;
}



public void setLength(double length) {
	this.length = length;
}



public double getDelay() {
	return delay;
}



public void setDelay(double delay) {
	this.delay = delay;
}



public double getBandwidth() {
	return bandwidth;
}



public void setBandwidth(double bandwidth) {
	this.bandwidth = bandwidth;
}



public int getASfrom() {
	return ASfrom;
}

public void setASfrom(int aSfrom) {
	ASfrom = aSfrom;
}

public int getASto() {
	return ASto;
}

public void setASto(int aSto) {
	ASto = aSto;
}

public String print()
 {
  return "edgeID: "+ edgeId + " From: " + from + " To: " + to + " Len: " + length + "Delay" + delay + " bandw " + bandwidth;
 }


public String toString() {
	return "edgeId=" + edgeId;
}

public boolean equals(Object obj){
	if(obj instanceof NetEdge){
		NetEdge e=(NetEdge) obj;
		return (e.getFrom()==this.from && e.getTo()==this.to) || (e.getFrom()==this.to && e.getTo()==this.from);
	}else{
		return false;
	}
			
}

/*
 * 
 */
public NetEdge copy(){
	NetEdge edge=new NetEdge(this.getFrom(),this.getTo());
	edge.setASfrom(this.getASfrom());
	edge.setASto(this.getASto());
	edge.setBandwidth(this.getBandwidth());
	edge.setDelay(this.getDelay());
	edge.setEdgeId(this.getEdgeId());
	edge.setLength(this.getLength());
	edge.setUP(this.status.equals(Status.UP));
	return edge;
}


public boolean isUP() {
	return this.status.equals(Status.UP);
}


public void setUP(boolean isUP) {
	if(isUP)
		this.status = Status.UP;
	else
		this.status = Status.DOWN;
}


public NetProperties getProperties(){
	return this.properties;
} 


public String getProperty(String key){
	return this.properties.getProperty(key);
}



public Status getStatus() {
	return this.status;
}




}

